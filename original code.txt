extends CharacterBody2D

var health = 10
var courage = 0
const SPEED = 95.0
const JUMP_VELOCITY = -170.0

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting("physics/2d/default_gravity")

@onready var anim = get_node("AnimationPlayer")

func _physics_process(delta):
	
	# Add the gravity.
	if !is_on_floor():
		velocity.y += gravity * delta
	# Handle Jump.
	if Input.is_action_just_pressed("jump") and is_on_floor():
		velocity.y = JUMP_VELOCITY
		anim.play("Jump")
	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var direction = Input.get_axis("left", "right")
	if direction == -1:
		get_node("AnimatedSprite2D").flip_h = true
	elif direction == 1:
		get_node("AnimatedSprite2D").flip_h = false
	if direction:
		velocity.x = direction * SPEED
		if velocity.y == 0:
			anim.play("Run")
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)
		if velocity.y == 0:
			anim.play("Idle")
	if velocity.y > 0:
		anim.play("Fall")
	move_and_slide()
	
	if health <= 0:
		anim.play("Death")
		anim.play("Death Idle")


#Snapcracker Code Below
var snapcracker_scene = preload("res://Throwables/Snapcracker.tscn")
var snapcracker_instance
var is_throwing = false
var prev_position = Vector2.ZERO

func _ready():
	snapcracker_instance = snapcracker_scene.instantiate()
	add_child(snapcracker_instance)
	snapcracker_instance.hide()

func _process(_delta):
	update_throw_direction()

	if Input.is_action_just_pressed("left_click") and !is_throwing:
		start_throw_animation()

	if Input.is_action_just_released("left_click") and is_throwing:
		throw_snapcracker()

	if is_throwing:
		var throw_direction = get_global_mouse_position() - global_position
		if throw_direction.x < 0:
			$AnimatedSprite2D.flip_h = true   # Flip the sprite to face left
		elif throw_direction.x > 0:
			$AnimatedSprite2D.flip_h = false   # Set the scale to face right

	else:
		if velocity.x < 0:
			$AnimatedSprite2D.flip_h = true  # Flip the sprite to face left
		elif velocity.x > 0:
			$AnimatedSprite2D.flip_h = false   # Set the scale to face right
		# Use the cursor position to determine facing direction when not throwing

func update_throw_direction():
	pass
	# Your existing code for update_throw_direction goes here

func start_throw_animation():
	$AnimatedSprite2D.play("Throw")
	is_throwing = true

func throw_snapcracker():
	$AnimatedSprite2D.play("Release")
	is_throwing = false
