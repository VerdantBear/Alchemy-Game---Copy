extends CharacterBody2D

var health = 10
var courage = 0
const SPEED = 95.0
const JUMP_VELOCITY = -170.0

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting("physics/2d/default_gravity")

@onready var anim = get_node("AnimationPlayer")

enum State {
	IDLE,
	RUN,
	JUMP,
	FALL,
	DEATH,
	THROW
}

var state = State.IDLE
var snapcracker_scene = preload("res://Throwables/Snapcracker.tscn")
var snapcracker_instance
var prev_position = Vector2.ZERO

func _ready():
	snapcracker_instance = snapcracker_scene.instantiate()
	add_child(snapcracker_instance)
	snapcracker_instance.hide()

func _process(delta):
	handle_input(delta)
	handle_animation()

func _physics_process(delta):
	if not is_on_floor():
		velocity.y += gravity * delta
	handle_movement(delta)

func handle_input(delta):
	if Input.is_action_just_pressed("left_click") and state != State.THROW:
		start_throw_animation()
		state = State.THROW

	if Input.is_action_just_released("left_click") and state == State.THROW:
		throw_snapcracker()
		state = State.IDLE

	if Input.is_action_pressed("jump") and is_on_floor():
		state = State.JUMP
		velocity.y = JUMP_VELOCITY

	var direction = Input.get_axis("left", "right")
	if direction:
		velocity.x = direction * SPEED
		state = State.RUN
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)
		state = State.IDLE

	if velocity.y > 0:
		state = State.FALL

	if health <= 0:
		state = State.DEATH

func start_throw_animation():
	state = State.THROW

func throw_snapcracker():
  ##ADD IN STUFF HERE TO THROW THE HIDDEN SNAPCRACKER
	state = State.IDLE

func handle_animation():
	var anim = get_node("AnimatedSprite2D")
	match state:
		State.IDLE:
			anim.play("Idle")
		State.RUN:
			anim.play("Run")
		State.JUMP:
			anim.play("Jump")
		State.FALL:
			anim.play("Fall")
		State.DEATH:
			anim.play("Death")
		State.THROW:
			anim.play("Throw")

func handle_movement(delta):
	if state != State.DEATH:
		move_and_slide()
	else:
		velocity = Vector2.ZERO
